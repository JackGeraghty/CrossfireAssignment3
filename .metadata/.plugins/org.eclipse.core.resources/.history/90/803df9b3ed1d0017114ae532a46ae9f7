#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "CrossfireA3Head.h"

//C file for setting up the board and it's elements

void createBoard(int Size, struct Slot **upLeft, struct Slot **upRight, struct Slot **downLeft, struct Slot **downRight)
{
	srand(time(NULL));
	Board = malloc(Size * sizeof(struct Slot *));
	int i;
	int j;
	int k;

	//Set up the board as a pointer of pointer to slots
	for (int i = 0; i < Size; i++)
	{
		Board[i] = malloc(Size * sizeof(struct Slot));

		for  (j = 0; j < Size; j++)
		{
			Board[i][j].row = i;
			Board[i][j].column = j;
		}
	}

	for (i = 0; i < Size - 1; i++)
	{
		//Set up slots that don't have an element adjacent on the left
		Board[i][0].right = &Board[i][1];
		Board[i][0].up = &Board[i][0];
		Board[i][0].down = &Board[i + 1][0];
		Board[i][0].left = NULL;

		//Set up slots that don't have an element adjacent on the right
		Board[i][Size - 1].left = &Board[Size ][Size - 2];
		Board[i][Size - 1].up = &Board[i - 1][Size - 1];
		Board[i][Size - 1].down = &Board[i + 1][Size - 1];
		Board[i][Size - 1].right = NULL;
	}

	//Set up adjacent slots for (0,0)
	Board[0][0].right = &Board[0][1];
	Board[0][0].down = &Board[1][0];
	Board[0][0].left = NULL;
	Board[0][0].up = NULL;

	//Set up adjacent slots for (0, Size -1)
	Board[0][Size - 1].left = &Board[0][Size - 2];
	Board[0][Size - 1].down = &Board[1][Size - 1];
	Board[0][Size - 1].up = NULL;
	Board[0][Size - 1].right = NULL;

	//Adjacent slots for (Size-1, 0)
	Board[Size - 1][0].right = &Board[Size - 1][1];
	Board[Size - 1][0].up = &Board[Size - 2][0];
	Board[Size - 1][0].down = NULL;
	Board[Size - 1][0].left = NULL;

	//Adjacent slots for (Size - 1, Size -1)
	Board[Size - 1][Size - 1].up = &Board[Size - 2][Size - 1];
	Board[Size - 1][Size - 1].left = &Board[Size - 1][Size - 2];
	Board[Size - 1][Size - 1].right = NULL;
	Board[Size - 1][Size - 1].down = NULL;

	//Adjacent Slots for top row no corners
	for (i = 1; i < Size - 1; i++)
	{
		Board[0][i].up = NULL;
		Board[0][i].down = &Board[1+1][i];
		Board[0][i].right = &Board[0][i+1];
		Board[0][i].left = &Board[0][i - 1];
	}

	//Adjacent slots for bottom row no corners
	for (i = 1; i < Size - 1; i++)
	{
		Board[Size - 1][i].up = &Board[i-1][i];
		Board[Size - 1][i].down = NULL;
		Board[Size - 1][i].right = &Board[0][i+1];
		Board[Size - 1][i].left = &Board[0][i - 1];
	}

	//Adjacent Slots for left column no corners
	for (i = 1; i < Size - 1; i++)
	{
		Board[i][0].up = &Board[i - 1][0];
		Board[i][0].down = &Board[i + 1][0];
		Board[i][0].right = &Board[i][i + 1];
		Board[i][0].left = NULL;
	}

	//Adjacent Slots for right column no corners
	for (i = 1; i < Size - 1; i++)
	{
		Board[i][Size - 1].up = &Board[i - 1][Size - 1];
		Board[i][Size - 1].down = &Board[i + 1][Size - 1];
		Board[i][Size - 1].right = NULL;
		Board[i][Size - 1].left = &Board[i][Size - 2];
	}

	for (i = 0; i < Size; i++)
	{
		for (j = 0; j < Size; j++)
		{
			Board[i][j].up = &Board[i-1][j];
			Board[i][j].right = &Board[i][j+1];
			Board[i][j].down = &Board[i+1][j];
			Board[i][j].left = &Board[i][j-1];
		}
	}

	*upLeft = &Board[0][0];
	*upRight = &Board[0][Size - 1];
	*downLeft = &Board[Size - 1][0];
	*downRight = &Board[Size - 1][Size - 1];

	//Test Print the board
	for (i = 0; i < Size;i++)
		{
			for (j = 0; j < Size; j++)
			{
				printf("[%d][%d] ", Board[i][j].row,Board[i][j].column);
						if (j == Size - 1)
						{
							printf("\n");
						}
			}

		}


	//Randomly assign each position a type and store them in a global array
	for (i = 0; i < Size; i++)
	{

		for (j = 0; j < Size; j++)
		{
			k = rand() % 3;
			Board[i][j].Type = k;
		}
	}

	//Test print each slot type
/*
	for (i = 0; i < Size; i++)
	{
		for (j = 0; j < Size; j++)
		{
			if (slot_Types[i][j] == 0)
			{
				printf("[Level Ground] ");
			}

			else if (slot_Types[i][j] == 1)
			{
				printf("[Hill] ");
			}

			else if (slot_Types[i][j] == 2)
			{
				printf("[City] ");
			}
			if (j == Size-1)
			{
				printf("\n");
			}
		}
	}
*/
}


//Function to randomly assign a location to each player
void fillPlayers(int Size)
{
	int i;

	for (i = 0; i < Num_Players; i++)
	{
		players[i].Pos = &Board[rand() % Size][rand() % Size];
	}

	for (i = 0; i < Num_Players; i++)
	{
		printf("%s is in position [%d, %d]\n", players[i].Name, players[i].Pos->row , players[i].Pos->column);
	}
}
