#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

#include "CrossfireA3Head.h"

//C file to manage each turn

void Turn()
{
	Remaining_Players = Num_Players;
	int is_game_over = 0;
	int player_choice;
	int i;

	//What does each player do?
	do
	{
		for (i = 0; i < Remaining_Players; i++)
		{
			player_choice = getInput(i);

			//Move
			if (player_choice == 1 && Remaining_Players  <= 1)
			{
				Move(i);
			}

			//Attack
			else if (player_choice == 2 && Remaining_Players  <= 1)
			{
				Attack(i);
			}

			//Quit
			else if (player_choice == 3 )
			{
				removePlayer(i);
				i--;	//Move back i to adjust to their being less players
			}

			//Checks to see if there is only one left in the game
			if (Remaining_Players <= 1)
			{
				is_game_over = 1;
			}

			printf("Remaining Players = %d\n", Remaining_Players);
		}
	} while (is_game_over == 0);

	printf("Game Over, %s is the winner\n", players[i].Name);
}


void Move(int PlayerID)
{
	//char input[MAX_SIZE_INPUT];

	//check can move

}

void Attack(int PlayerID)
{

}

int check_input(char *StringIn, char *Command)
{
	int output;
	int i;

	//Get rid of any newline characters and replace them with NULL terminators
	for (i = 0; i < strlen(StringIn); i++)
	{
		if (StringIn[i] == '\n')
		{
			StringIn[i] = '\0';
		}
	}
	output = strcmp(strlwr(StringIn), Command);

	return output;
}

int getInput(int PlayerID)
{
	bool is_valid;
	char input[MAX_SIZE_INPUT];
	int output;

	do
	{
		is_valid = false;
		printf("Would %s like to 'move', 'attack' or 'quit'?\n", players[PlayerID].Name);
		fgets(input, sizeof(input), stdin);

		//Player wants to move
		if (check_input(input, "move") == 0)
		{
			printf("%s is Going to Move\n", players[PlayerID].Name);
			output = 1;
			is_valid = true;
		}

		else if (check_input(input, "attack") == 0)
		{
			printf("%s is Going to Attack\n", players[PlayerID].Name);
			output = 2;
			is_valid = true;
		}

		else if (check_input(input, "quit") == 0)
		{
			printf("%s is Quitting the Game :(\n", players[PlayerID].Name);
			output = 3;
			is_valid = true;
		}

		else
		{
			printf("Please Enter a Valid Input\n");
		}
	} while (is_valid == false);

	return output;
}

void removePlayer(int PlayerID)
{
	int i;
	struct Player deadPlayer[1];

	deadPlayer[0] = players[PlayerID];

	for (i = PlayerID + 1; i < Remaining_Players; i++)
	{
		players[i - 1] = players[i];
	}

	players[i] = deadPlayer[0];
	Remaining_Players--;
}

