#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

#include "CrossfireA3Head.h"

//C file to manage each turn
//Turn Function
//Handles what each player does while the game is still going
void Turn(int BoardSize)
{
	Remaining_Players = Num_Players;
	int is_game_over = 0;
	int player_choice;
	int i;

	//What does each player do?
	do
	{
		for (i = 0; i < Remaining_Players; i++)
		{
			player_choice = getInput(i);

			//Move
			if (player_choice == 1 && Remaining_Players  >= 1)
			{
				//printf("Entering move of turn\n");
				printf("%s is in position [%d, %d] ", players[i].Name, players[i].row, players[i].column);
					if (players[i].slot_type == 0)
					{
						printf("[Level Ground]\n");
					}
					else if (players[i].slot_type == 1)
					{
						printf("[Hill]\n");
					}

					else if (players[i].slot_type == 2)
					{
						printf("[City]\n");
					}
				Move(i, BoardSize);
				printf("%s is now in position [%d, %d]", players[i].Name, players[i].row, players[i].column);

				modValues(i);
			}

			//Attack
			else if (player_choice == 2 && Remaining_Players  >= 1)
			{
				Attack(i);
			}

			//Quit
			else if (player_choice == 3 )
			{
				removePlayer(i);
				players[i].has_quit = 1;
				i--;	//Move back i to adjust to their being less players
			}

			//Checks to see if there is only one left in the game
			if (Remaining_Players <= 1)
			{
				is_game_over = 1;
			}

			printf("Remaining Players = %d\n", Remaining_Players);
			printf("End of %s's turn\n", players[0].Name);
		}
	} while (is_game_over == 0);

	for (i = 0; i < Num_Players; i++)
	{
		if (players[i].has_quit == 0)
		{
			printf("Game Over, %s is the winner\n", players[i].Name);
		}
	}
	//printf("Game Over, %s is the winner\n", players[i].Name);
}

//Function to control the movement of each player
void Move(int PlayerID, int BoardSize)
{
	bool is_valid = false;
	char input[MAX_SIZE_INPUT];

	//printf("Entered move function\n");

	//Player is in one of the four corners
	if (((players[PlayerID].row == 0) && (players[PlayerID].column == 0))
		||((players[PlayerID].row == 0) && (players[PlayerID].column == BoardSize - 1))
		||((players[PlayerID].row == BoardSize - 1) && (players[PlayerID].column == 0))
		||((players[PlayerID].row == BoardSize - 1) && (players[PlayerID].column == BoardSize - 1)))
	{
		//Player is in top left
		if ((players[PlayerID].row == 0) && (players[PlayerID].column == 0))
		{
			do
			{
				printf("%s is in the top left corner of the board. Should they move 'right' or 'down' ?\n", players[PlayerID].Name);
				fgets(input, sizeof(input), stdin);

				if (check_input(input, "right") == 0)
				{
					//Player wants to move right
					is_valid = moveDir(PlayerID, 3);
				}

				else if (check_input(input, "down") == 0)
				{
					//Player wants to move down
					is_valid = moveDir(PlayerID, 4);
				}

				else
				{
					printf("Please enter a valid input.\n");
				}

			} while (is_valid == false);

		}

		//Player is in the top right corner of the board
		else if ((players[PlayerID].row == 0) && (players[PlayerID].column == BoardSize - 1))
		{
			do
			{
				printf("%s is in the top right corner of the board. Should they move 'left' or 'down' ?\n", players[PlayerID].Name);
				fgets(input, sizeof(input), stdin);

				if (check_input(input, "left") == 0)
				{
					//Move left
					is_valid = moveDir(PlayerID, 4);
				}

				else if (check_input(input, "down") == 0)
				{
					//Move Down
					is_valid = moveDir(PlayerID, 1);
				}

				else
				{
					printf("Please enter a valid input.\n");
				}
			} while (is_valid == false);
		}

		//Player is in bottom left corner
		else if ((players[PlayerID].row == BoardSize - 1) && (players[PlayerID].column == 0))
		{
			do
			{
				printf("%s is in the bottom left corner. Should they move 'right' or 'up' ?\n", players[PlayerID].Name);
				fgets(input, sizeof(input), stdin);

				if (check_input(input, "right") == 0)
				{
					//Move Right
					is_valid = moveDir(PlayerID, 3);
				}

				else if (check_input(input, "up") == 0)
				{
					//Move up
					is_valid = moveDir(PlayerID, 2);
				}

				else
				{
					printf("Please enter a valid input.\n");
				}
			} while (is_valid == false);
		}

		//Player is in bottom right corner
		else if ((players[PlayerID].row == BoardSize - 1) && (players[PlayerID].column == BoardSize - 1))
		{
			do
			{
				printf("%s is in the bottom right corner. Should they move 'left' or 'up' ?\n", players[PlayerID].Name);
				fgets(input, sizeof(input), stdin);

				if(check_input(input, "left") == 0)
				{
					//Move left
					is_valid = moveDir(PlayerID, 4);
				}

				else if (check_input(input, "up") == 0)
				{
					//Move up
					is_valid = moveDir(PlayerID, 2);
				}
				else
				{
					printf("Please enter a valid input.\n");
				}
			} while (is_valid == false);
		}

		////////
	}

	//Player is on the edges of the board but not the corners
	else if (( (players[PlayerID].row == 0) && (players[PlayerID].column != 0 || players[PlayerID].column != BoardSize - 1) )
			||( (players[PlayerID].row == BoardSize - 1) && (players[PlayerID].column != 0 || players[PlayerID].column != BoardSize - 1) )
			||( (players[PlayerID].column == 0) && (players[PlayerID].row != 0 || players[PlayerID].row != BoardSize - 1) )
			||( (players[PlayerID].column == BoardSize - 1) && (players[PlayerID].row != 0 || players[PlayerID].row != BoardSize - 1) )	)
	{
		//Player is in row one
		if (( (players[PlayerID].row == 0) && (players[PlayerID].column != 0 || players[PlayerID].column != BoardSize - 1) ) )
		{
			do
			{
				printf("%s is in the top row but not in one of the corners. Should they move 'left' , 'right' or 'down' ?\n", players[PlayerID].Name);
				fgets(input, sizeof(input), stdin);

				if (check_input(input, "left") == 0)
				{
					//Move left
					is_valid = moveDir(PlayerID, 4);
				}

				else if (check_input(input, "right") == 0)
				{
					//Move right
					is_valid = moveDir(PlayerID, 3);
				}

				else if (check_input(input, "down") == 0)
				{
					//Move down
					is_valid = moveDir(PlayerID, 1);
				}

				else
				{
					printf("Please enter a valid input.\n");
				}

			} while (is_valid == false);
		}

		//Player is in last row
		else if (( (players[PlayerID].row == BoardSize - 1) && (players[PlayerID].column != 0 || players[PlayerID].column != BoardSize - 1) ))
		{
			do
			{
				printf("%s is in the bottom row but not in one of the corners. Should they move 'left', 'right' or 'up' ?\n",players[PlayerID].Name);
				fgets(input, sizeof(input), stdin);

				if (check_input(input, "left") == 0)
				{
					//Move left
					is_valid = moveDir(PlayerID, 4);
				}

				else if (check_input(input, "right") == 0)
				{
					//Move right
					is_valid = moveDir(PlayerID, 3);
				}

				else if (check_input(input, "up") == 0)
				{
					//Move up
					is_valid = moveDir(PlayerID, 2);
				}

				else
				{
					printf("Please enter a valid input.\n");
				}
			} while (is_valid == false);
		}

		//Player is in left column
		else if (( (players[PlayerID].column == 0) && (players[PlayerID].row != 0 || players[PlayerID].row != BoardSize - 1) ))
		{
			do
			{
				printf("%s is in the left most column but not in one of the corners. Should they move 'right', 'up' or 'down' ?\n", players[PlayerID].Name);
				fgets(input, sizeof(input), stdin);

				if (check_input(input, "right") == 0)
				{
					//Moving right
					is_valid = moveDir(PlayerID, 3);
				}

				else if (check_input(input, "up") == 0)
				{
					//Moving up
					is_valid = moveDir(PlayerID, 2);
				}

				else if (check_input(input, "down") == 0)
				{
					//Moving down
					is_valid = moveDir(PlayerID, 1);
				}

				else
				{
					printf("Please enter a valid input.\n");
				}
			} while (is_valid == false);
		}

		//Player is in the right most column
		else if(( (players[PlayerID].column == BoardSize - 1) && (players[PlayerID].row != 0 || players[PlayerID].row != BoardSize - 1) ))
		{
			do
			{
				printf("%s is in the right most column but not in one of the corners. Should they move 'left', 'up' or 'down' ?\n", players[PlayerID].Name);
				fgets(input, sizeof(input), stdin);

				if ((check_input(input, "left") == 0))
				{
					//Moving left
					is_valid = moveDir(PlayerID, 4);

				}

				else if ((check_input(input, "up") == 0))
				{
					//Moving up
					is_valid = moveDir(PlayerID, 2);
				}

				else if ((check_input(input, "down") == 0))
				{
					//Moving down
					is_valid = moveDir(PlayerID, 1);
				}

				else
				{
					printf("Please enter a valid input.\n");
				}

			} while (is_valid == false);
		}
	}

	//Player is in the middle area of the board
	else if ((players[PlayerID].row != 0)
			&& (players[PlayerID].row != BoardSize - 1)
			&& (players[PlayerID].column != 0)
			&& (players[PlayerID].column != 0))
	{
		do
		{
			printf("%s is in the middle section of the board. Should they move 'left', 'right', 'up' or 'down' ?\n", players[PlayerID].Name);
			fgets(input, sizeof(input), stdin);

			if ((check_input(input, "left") == 0))
			{
				//Moving left
				is_valid = moveDir(PlayerID, 4);
			}

			else if ((check_input(input, "right") == 0))
			{
				//Moving right
				is_valid = moveDir(PlayerID, 3);
			}

			else if ((check_input(input, "up") == 0))
			{
				//Moving up
				is_valid = moveDir(PlayerID, 2);
			}

			else if ((check_input(input, "down") == 0))
			{
				//Moving down
				is_valid = moveDir(PlayerID, 1);
			}

			else
			{
				printf("Please enter a valid input.\n");
			}
		} while (is_valid == false);
	}

	else
	{
		printf("Problem moving player.\n");
	}
}

int moveDir(int PlayerID, int dir)
{
	//Down
	if (dir == 1)
	{
		printf("%s is moving down.\n", players[PlayerID].Name);
		players[PlayerID].row++;
	}

	//Up
	else if (dir == 2)
	{
		printf("%s is moving up.\n", players[PlayerID].Name);
		players[PlayerID].row--;
	}

	//Right
	else if (dir == 3)
	{
		printf("%s is moving right.\n", players[PlayerID].Name);
		players[PlayerID].column++;
	}

	//Left
	else if (dir == 4)
	{
		printf("%s is moving left.\n", players[PlayerID].Name);
		players[PlayerID].column--;
	}

	return 1;

}
//Function to control when a player wants to attack
void Attack(int PlayerID)
{

}

//Function to check the input of the user to see what they want to do
int check_input(char *StringIn, char *Command)
{
	int output;
	int i;

	//Get rid of any newline characters and replace them with NULL terminators
	for (i = 0; i < strlen(StringIn); i++)
	{
		if (StringIn[i] == '\n')
		{
			StringIn[i] = '\0';
		}
	}
	output = strcmp(strlwr(StringIn), Command);

	return output;
}

//Function to get input  from the player to see what they want to do each turn
int getInput(int PlayerID)
{
	bool is_valid;
	char input[MAX_SIZE_INPUT];
	int output;

	do
	{
		is_valid = false;
		printf("Would %s like to 'move', 'attack' or 'quit'?\n", players[PlayerID].Name);
		fgets(input, sizeof(input), stdin);

		//Player wants to move
		if (check_input(input, "move") == 0)
		{
			//printf("%s is Going to Move\n", players[PlayerID].Name);
			output = 1;
			is_valid = true;
			//printf("Returning 1\n");
		}

		else if (check_input(input, "attack") == 0)
		{
			printf("%s is Going to Attack\n", players[PlayerID].Name);
			output = 2;
			is_valid = true;
		}

		else if (check_input(input, "quit") == 0)
		{
			printf("%s is Quitting the Game :(\n", players[PlayerID].Name);
			output = 3;
			is_valid = true;
		}

		else
		{
			printf("Please Enter a Valid Input\n");
		}
	} while (is_valid == false);

	return output;
}

//Function to remove a player from the game if they quit or lose all their health
void removePlayer(int PlayerID)
{
	int i;
	struct Player deadPlayer[1];

	deadPlayer[0] = players[PlayerID];

	for (i = PlayerID + 1; i < Remaining_Players; i++)
	{
		players[i - 1] = players[i];
	}

	players[i] = deadPlayer[0];
	Remaining_Players--;
}

void modValues(int PlayerID)
{
	//Assign the player the slot type of their current slot
	players[PlayerID].slot_type = slot_Types[players[PlayerID].row][players[PlayerID].column];

	//Modify their value based on that slot

	//Hill
	if (players[PlayerID].slot_type == 1)
	{
		if (players[PlayerID].Dexterity < 50 )
		{
			players[PlayerID].Strength -= 10;
				//Check to see if their strength falls below 0
				if (players[PlayerID].Strength < 0)
				{
					players[PlayerID].Strength = 0;
				}
		}

		else if (players[PlayerID].Dexterity >= 60)
		{
			players[PlayerID].Strength += 10;
				//Check to see if their strength exceeds 100
				if (players[PlayerID].Strength > 100)
				{
					players[PlayerID].Strength = 100;
				}
		}
	}

	else if (players[PlayerID].slot_type == 2)
	{
		if (players[PlayerID].Smartness > 60)
		{
			players[PlayerID].Magic_Skills += 10;
				if (players[PlayerID].Magic_Skills > 100)
				{
					players[PlayerID].Magic_Skills = 100;
				}
		}

		else if (players[PlayerID].Smartness <= 50)
		{
			players[PlayerID].Dexterity -= 10;
				if (players[PlayerID].Dexterity < 0)
				{
					players[PlayerID].Dexterity = 0;
				}
		}
	}

	//printf("Values Modified\n");
}
